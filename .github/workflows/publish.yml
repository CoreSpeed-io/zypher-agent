name: Publish to JSR

on:
  push:
    branches: [main, ci/add-jsr-publish-workflow] # Add test branch
    paths: ["deno.json"]
  workflow_dispatch: # Allow manual trigger for failed publishes

permissions:
  contents: read
  id-token: write # The OIDC ID token is used for authentication with JSR.

jobs:
  check-version-change:
    runs-on: ubuntu-latest
    outputs:
      version-changed: ${{ steps.check.outputs.changed }}
      new-version: ${{ steps.check.outputs.new-version }}
      old-version: ${{ steps.check.outputs.old-version }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2 # Only need previous commit

      - name: Check version change
        id: check
        run: |
          NEW_VERSION=$(jq -r '.version' deno.json)
          OLD_VERSION=$(git show HEAD~1:deno.json | jq -r '.version' 2>/dev/null || echo "0.0.0")

          if [ "$NEW_VERSION" != "$OLD_VERSION" ]; then
            echo "changed=true" >> $GITHUB_OUTPUT
            echo "new-version=$NEW_VERSION" >> $GITHUB_OUTPUT
            echo "old-version=$OLD_VERSION" >> $GITHUB_OUTPUT
            echo "🚀 Version change detected: $OLD_VERSION → $NEW_VERSION"
          else
            echo "changed=false" >> $GITHUB_OUTPUT
            echo "No version change in deno.json"
          fi

  publish:
    needs: check-version-change
    if: needs.check-version-change.outputs.version-changed == 'true'
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Need full history for changelog

      - name: Setup Deno
        uses: denoland/setup-deno@v2
        with:
          deno-version: v2.5.1

      - name: Install dependencies
        run: deno install --frozen=true

      - name: Run validation
        run: |
          echo "🔍 Validating v${{ needs.check-version-change.outputs.new-version }}..."
          deno fmt --check
          deno lint
          deno check .
          deno test --ignore=**/*.integration.test.ts

      - name: Generate changelog
        id: changelog
        uses: mikepenz/release-changelog-builder-action@v5

      - name: Dry run publish
        run: |
          echo "🧪 Testing JSR publish..."
          deno publish --dry-run

      - name: Publish to JSR
        run: |
          echo "📦 Publishing v${{ needs.check-version-change.outputs.new-version }} to JSR..."
          if [ "${{ github.ref }}" = "refs/heads/main" ]; then
            deno publish
            echo "✅ Successfully published!"
          else
            echo "🧪 Test mode - skipping actual publish (not on main branch)"
          fi

      - name: Create GitHub Release
        if: github.ref == 'refs/heads/main' # Only create release on main
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ needs.check-version-change.outputs.new-version }}
          release_name: Release v${{ needs.check-version-change.outputs.new-version }}
          body: |
            ${{ steps.changelog.outputs.changelog }}

            ---
            📦 **JSR Package**: https://jsr.io/@corespeed/zypher/v${{ needs.check-version-change.outputs.new-version }}
          draft: false
          prerelease: false
