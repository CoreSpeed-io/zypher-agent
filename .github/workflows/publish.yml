name: Publish to JSR

on:
  push:
    branches: [main, "fix/changelog-gen"] # for testing

jobs:
  check-version-change:
    runs-on: ubuntu-latest
    outputs:
      version-changed: ${{ steps.check.outputs.changed }}
      new-version: ${{ steps.check.outputs.new-version }}
      old-version: ${{ steps.check.outputs.old-version }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2 # Only need previous commit

      - name: Check version change
        id: check
        run: |
          NEW_VERSION=$(jq -r '.version' deno.json)
          OLD_VERSION=$(git show HEAD~1:deno.json | jq -r '.version' 2>/dev/null || echo "0.0.0")

          if [ "$NEW_VERSION" != "$OLD_VERSION" ]; then
            echo "changed=true" >> $GITHUB_OUTPUT
            echo "new-version=$NEW_VERSION" >> $GITHUB_OUTPUT
            echo "old-version=$OLD_VERSION" >> $GITHUB_OUTPUT
            echo "ðŸš€ Version change detected: $OLD_VERSION â†’ $NEW_VERSION"
          else
            echo "changed=false" >> $GITHUB_OUTPUT
            echo "No version change in deno.json"
          fi

  publish:
    runs-on: ubuntu-latest
    permissions:
      contents: write # Required for creating GitHub releases
      id-token: write # Required for JSR authentication

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Required for changelog generation

      - name: Setup Deno
        uses: denoland/setup-deno@v2
        with:
          deno-version: v2.5.1

      - name: Install dependencies
        run: deno install --frozen=true

      - name: Run validation
        run: |
          deno fmt --check
          deno lint
          deno check .
          deno test --ignore=**/*.integration.test.ts

      - name: Generate changelog
        id: changelog
        continue-on-error: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        uses: mikepenz/release-changelog-builder-action@v5
